type: edu
files:
- name: src/recipes/RecipesApplication.java
  visible: true
  text: |
    package recipes;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class RecipesApplication {
        public static void main(String[] args) {
            SpringApplication.run(RecipesApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=8881
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/RecipesApplicationTest.java
  visible: false
  text: |
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
    import recipes.RecipesApplication;

    import java.util.*;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;


    public class RecipesApplicationTest extends SpringTest {

        public RecipesApplicationTest() {
            super(RecipesApplication.class, "../recipes_db.mv.db");
        }

        // Initialization ---

        static class Recipe {
            final String name;
            final String category;
            final String description;
            final String[] ingredients;
            final String[] directions;

            Recipe(String name, String category, String description, String[] ingredients, String[] directions) {
                this.name = name;
                this.category = category;
                this.description = description;
                this.ingredients = ingredients;
                this.directions = directions;
            }
        }

        final Recipe[] RECIPES = {
            // 0
            new Recipe(
                "Fresh Mint Tea /Test",
                "beverage /Test",
                "Light, aromatic and refreshing beverage, ... /Test",
                new String[]{"boiled water", "honey", "fresh mint leaves /Test"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again /Test"}
            ),
            // 1
            new Recipe(
                "Warming Ginger Tea /Test",
                "beverage /Test",
                "Ginger tea is a warming drink for cool weather, ... /Test",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey /Test"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy /Test"}
            ),
            // 2
            new Recipe(
                "ice-cream",
                "Dessert",
                "-",
                new String[]{"--", "---", "-"},
                new String[]{"----", "---"}
            ),
            // 3
            new Recipe(
                "tea r 4",
                "DesserT",
                "---",
                new String[]{"-", "----", "-"},
                new String[]{"----", "--", "--"}
            ),
            // 4
            new Recipe(
                "recipe ice-cream 5",
                "Desser",
                "---",
                new String[]{"-", "--", "-"},
                new String[]{"-", "--", "---"}
            ),
            // 5
            new Recipe(
                "--",
                "DeSSert",
                "---",
                new String[]{"---", "-", "--"},
                new String[]{"---", "-"}
            ),
            // 6
            new Recipe(
                "ICE-CREAM",
                "desserT",
                "----",
                new String[]{"-", "-", "--"},
                new String[]{"---", "--", "--"}
            ),
            // 7
            new Recipe(
                "---",
                "dessert",
                "--",
                new String[]{"-", "----"},
                new String[]{"-----", "-", "---"}
            ),
            // 8
            new Recipe(
                "9 recipe Tea test",
                "-",
                "----",
                new String[]{"-", "-", "----"},
                new String[]{"-----", "-", "--"}
            ),
            // 9
            new Recipe(
                "10 ice recipe test",
                "-",
                "--",
                new String[]{"----", "--;", "---"},
                new String[]{"--", "-"}
            ),
            // 10
            new Recipe(
                "11 ice-creamrecipe test",
                "veryDessert",
                "-",
                new String[]{"-", "--"},
                new String[]{"-----", "-", "---"}
            ),
            // 11
            new Recipe(
                "cream",
                "BEVerage",
                "--",
                new String[]{"---", "-", "-"},
                new String[]{"-", "--"}
            ),
            // 12
            new Recipe(
                "ice-cre",
                "---Dessert",
                "-",
                new String[]{"---", "-"},
                new String[]{"----", "-", "-"}
            ),

            // 13
            new Recipe(
                "ice-cream",
                "DESSERT",
                "-",
                new String[]{"----", "--"},
                new String[]{"-", "--", "-"}
            ),
            // 14
            new Recipe(
                "15 recipe test ice-CREAM",
                "Dessert",
                "-",
                new String[]{"-", "---'", "-----"},
                new String[]{"---", "-"}
            )
        };

        final Recipe[] INCORRECT_RECIPES = {
            //0
            new Recipe(
                null,
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //1
            new Recipe(
                "Fresh Mint Tea",
                null,
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //2
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                null,
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),
            //3
            new Recipe(
                "Fresh Mint Tea",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                null,
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //4
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                null
            ),
            //5
            new Recipe(
                "  ",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //6
            new Recipe(
                "Fresh Mint Tea",
                "  ",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //7
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "  ",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),
            //8
            new Recipe(
                "Fresh Mint Tea",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //9
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{}
            )
        };

        final Recipe[] RECIPES_CATEGORY_DESSERT_REVERSED = new Recipe[]{RECIPES[14], RECIPES[13], RECIPES[7], RECIPES[6],
            RECIPES[5], RECIPES[3], RECIPES[2]};

        final Recipe[] RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED = new Recipe[]{RECIPES[14], RECIPES[13], RECIPES[10], RECIPES[6],
            RECIPES[4], RECIPES[2]};

        final String[] JSON_RECIPES = toJson(RECIPES);
        final String[] JSON_INCORRECT_RECIPES = toJson(INCORRECT_RECIPES);

        final String API_RECIPE_NEW = "/api/recipe/new";
        final String API_RECIPE = "/api/recipe/";
        final String API_RECIPE_SEARCH = "/api/recipe/search/";
        final String API_REGISTER = "/api/register";

        // recipes ids will be saved when testing POST requests and used later to test GET/PUT/DELETE requests
        final List<Integer> recipeIds = new ArrayList<>();

        final String CATEGORY = "category";
        final String NAME = "name";

        final static Gson gson = new Gson();

        final String[] MAIN_LOGIN_PASS = {"LoginTest2@test.com", "Test2222222"};
        final String[] ADDITIONAL_LOGIN_PASS_1 = {"LoginTest1@test.com", "Test1111"};
        final String[] ADDITIONAL_LOGIN_PASS_2 = {"LoginTest3@test.com", "Test33333333333"};

        final String[] INCORRECT_LOGIN_CORRECT_PASS_1 = {"Test3@testcom", "Test3333"};
        final String[] INCORRECT_LOGIN_CORRECT_PASS_2 = {"Test4test.com", "Test44444444"};

        final String[] CORRECT_LOGIN_INCORRECT_PASS_1 = {"Test5@test.com", "Test555"};
        final String[] CORRECT_LOGIN_INCORRECT_PASS_2 = {"Test6@test.com", "        "};

        final String[] UNREGISTERED_LOGIN_PASS = {"abc@test.com", "password99"};


        // Helper functions ---

        static String[] toJson(Object[] objects) {
            return Arrays
                .stream(objects)
                .map(gson::toJson)
                .toArray(String[]::new);
        }

        static void throwIfIncorrectStatusCode(HttpResponse response, int status) {
            if (response.getStatusCode() != status) {
                throw new WrongAnswer(response.getRequest().getMethod() +
                    " " + response.getRequest().getLocalUri() +
                    " should respond with status code " + status +
                    ", responded: " + response.getStatusCode() + "\n\n" +
                    "Response body:\n" + response.getContent());
            }
        }

        CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }

            return correct();
        }

        static Map<String, String> generateUrlParams(int len) {
            Map<String, String> params = new LinkedHashMap<>();

            for (int i = 0; i < len; i++) {
                params.put("key" + i, "value" + i);
            }

            return params;
        }

        static void sleep(int milliseconds) {
            try {
                Thread.sleep(milliseconds);
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }
        }

        static JsonArrayBuilder recipesToJsonArrayBuilder(Recipe[] recipes) {
            JsonArrayBuilder isArray = isArray();

            // just appends "item"(s)
            for (Recipe recipe : recipes) {

                isArray = isArray.item(
                    isObject()
                        .value("name", isString(recipe.name))
                        .value("category", isString(recipe.category))
                        .value("date", isString(d -> d.length() >= 8))
                        .value("description", isString(recipe.description))
                        .value("ingredients", isArray(recipe.ingredients))
                        .value("directions", isArray(recipe.directions)));
            }

            return isArray;
        }

        public HttpRequest addAuthUnregisteredUser(HttpRequest request) {
            return request.basicAuth(UNREGISTERED_LOGIN_PASS[0], UNREGISTERED_LOGIN_PASS[1]);
        }


        // Tests ---

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
            () -> testPostRegister(ADDITIONAL_LOGIN_PASS_1, 200),
            () -> testPostRegister(ADDITIONAL_LOGIN_PASS_1, 400),
            () -> testPostRegister(MAIN_LOGIN_PASS, 200),
            () -> testPostRegister(ADDITIONAL_LOGIN_PASS_2, 200),
            () -> testPostRegister(INCORRECT_LOGIN_CORRECT_PASS_1, 400),
            () -> testPostRegister(INCORRECT_LOGIN_CORRECT_PASS_2, 400),
            () -> testPostRegister(CORRECT_LOGIN_INCORRECT_PASS_1, 400),
            () -> testPostRegister(CORRECT_LOGIN_INCORRECT_PASS_2, 400),

            // Tests with authentication
            () -> testPostRecipe(JSON_RECIPES[0], MAIN_LOGIN_PASS),
            () -> testPostRecipe(JSON_RECIPES[1], MAIN_LOGIN_PASS),

            () -> testGetRecipe(recipeIds.get(0), RECIPES[0], MAIN_LOGIN_PASS),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1], MAIN_LOGIN_PASS),
            this::reloadServer,
            () -> testGetRecipe(recipeIds.get(0), RECIPES[0], MAIN_LOGIN_PASS),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1], MAIN_LOGIN_PASS),

            () -> testUpdateRecipe(recipeIds.get(0), JSON_RECIPES[1], MAIN_LOGIN_PASS),
            () -> testGetRecipe(recipeIds.get(0), RECIPES[1], MAIN_LOGIN_PASS),

            () -> testDeleteRecipe(recipeIds.get(0), MAIN_LOGIN_PASS),

            () -> testDeleteRecipeNotFoundStatusCode(recipeIds.get(0), MAIN_LOGIN_PASS),
            () -> testGetRecipeNotFoundStatusCode(recipeIds.get(0), MAIN_LOGIN_PASS),
            () -> testUpdateRecipeNotFoundStatusCode(recipeIds.get(0), JSON_RECIPES[1], MAIN_LOGIN_PASS),


            // Add more recipes before testing if elems sorted correctly by date.
            // Sleep calls added because tests send requests very quickly and this can produce duplicate dates in rare cases.
            // And if a user uses "unstable" sort to sort recipes, tests will be unstable. Thread sleep prevents duplicates.
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[2], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[3], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[4], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[5], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[6], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[7], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[8], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[9], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[10], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[11], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[12], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[13], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[14], MAIN_LOGIN_PASS);
            },

            () -> testGetRecipesByCategorySorted(RECIPES_CATEGORY_DESSERT_REVERSED, "dessert", MAIN_LOGIN_PASS),
            () -> testGetRecipesByNameContainsSorted(RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED, "ice-cream", MAIN_LOGIN_PASS),

            () -> testGetRecipesByCategorySorted(new Recipe[]{}, "should_return_empty_array_1", MAIN_LOGIN_PASS),
            () -> testGetRecipesByNameContainsSorted(new Recipe[]{}, "should_return_empty_array_2", MAIN_LOGIN_PASS),

            () -> testGetRecipesBadRequestStatusCode(0, MAIN_LOGIN_PASS),
            () -> testGetRecipesBadRequestStatusCode(1, MAIN_LOGIN_PASS),
            () -> testGetRecipesBadRequestStatusCode(2, MAIN_LOGIN_PASS),
            () -> testGetRecipesBadRequestStatusCode(5, MAIN_LOGIN_PASS),

            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[0], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[1], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[2], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[3], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[4], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[5], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[6], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[7], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[8], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[9], MAIN_LOGIN_PASS),

            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[0], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[1], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[2], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[3], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[4], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[5], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[6], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[7], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[8], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[9], MAIN_LOGIN_PASS),
            this::reloadServer,

            // Use second registered user to check if endpoints are available.
            () -> testPostRecipe(JSON_RECIPES[0], ADDITIONAL_LOGIN_PASS_1),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1], ADDITIONAL_LOGIN_PASS_1),
            () -> testGetRecipesByCategorySorted(RECIPES_CATEGORY_DESSERT_REVERSED, "dessert", ADDITIONAL_LOGIN_PASS_1),
            () -> testGetRecipesByNameContainsSorted(RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED, "ice-cream", ADDITIONAL_LOGIN_PASS_1),
            // Use third registered user to check forbidden status code.
            () -> testDeleteRecipeForbiddenStatusCode(recipeIds.get(1), ADDITIONAL_LOGIN_PASS_2),
            () -> testUpdateRecipeForbiddenStatusCode(recipeIds.get(1), JSON_RECIPES[2], ADDITIONAL_LOGIN_PASS_2),

            // unregistered login and pass
            () -> testPostRecipeUnregisteredUser(JSON_RECIPES[0]),
            () -> testGetRecipeUnregisteredUser(recipeIds.get(0)),
            () -> testUpdateRecipeUnregisteredUser(recipeIds.get(0), JSON_RECIPES[1]),
            () -> testDeleteRecipeUnregisteredUser(recipeIds.get(0)),
            () -> testGetRecipesByCategorySortedUnregisteredUser("dessert"),
            () -> testGetRecipesByNameContainsSortedUnregisteredUser("ice-cream"),

            // without authentication
            () -> testPostRecipeNoAuth(JSON_RECIPES[0]),
            () -> testGetRecipeNoAuth(recipeIds.get(0)),
            () -> testUpdateRecipeNoAuth(recipeIds.get(0), JSON_RECIPES[1]),
            () -> testDeleteRecipeNoAuth(recipeIds.get(0)),
            () -> testGetRecipesByCategorySortedNoAuth("dessert"),
            () -> testGetRecipesByNameContainsSortedNoAuth("ice-cream")
        };

        CheckResult testPostRegister(String[] loginAndPass, int statusCode) {
            final String JSON_LOGIN_PASS = "{\"email\":\"" + loginAndPass[0] + "\",\"password\":\"" + loginAndPass[1] + "\"}";

            HttpResponse response = post(API_REGISTER, JSON_LOGIN_PASS).send();

            throwIfIncorrectStatusCode(response, statusCode);

            return correct();
        }

        // Tests with authentication
        CheckResult testPostRecipe(String jsonRecipe, String[] loginPass) {
            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(recipeId -> {
                        recipeIds.add(recipeId);
                        return true;
                    })));

            return correct();
        }

        CheckResult testGetRecipe(int recipeId, Recipe recipe, String[] loginPass) {
            HttpResponse response = get(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("name", isString(recipe.name))
                    .value("category", isString(recipe.category))
                    .value("date", isString(d -> d.length() >= 8))
                    .value("description", isString(recipe.description))
                    .value("ingredients", isArray(recipe.ingredients))
                    .value("directions", isArray(recipe.directions)));

            return correct();
        }

        CheckResult testUpdateRecipe(int recipeId, String jsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testDeleteRecipe(int recipeId, String[] loginPass) {
            HttpResponse response = delete(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testGetRecipesByCategorySorted(Recipe[] recipes, String paramValue, String[] loginPass) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam(CATEGORY, paramValue).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                recipesToJsonArrayBuilder(recipes)
            );

            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSorted(Recipe[] recipes, String paramValue, String[] loginPass) {
            HttpResponse response = get(API_RECIPE_SEARCH).basicAuth(loginPass[0], loginPass[1]).addParam(NAME, paramValue).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                recipesToJsonArrayBuilder(recipes)
            );

            return correct();
        }

        // Status codes tests with authentication
        CheckResult testGetRecipeNotFoundStatusCode(int recipeId, String[] loginPass) {
            HttpResponse response = get(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testUpdateRecipeNotFoundStatusCode(int recipeId, String jsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testDeleteRecipeNotFoundStatusCode(int recipeId, String[] loginPass) {
            HttpResponse response = delete(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testGetRecipesBadRequestStatusCode(int numberOfQueryParams, String[] loginPass) {
            Map<String, String> params = generateUrlParams(numberOfQueryParams);

            HttpResponse response = get(API_RECIPE_SEARCH).addParams(params).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testPostIncorrectRecipeStatusCode(String incorrectJsonRecipe, String[] loginPass) {
            HttpResponse response = post(API_RECIPE_NEW, incorrectJsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testUpdateIncorrectRecipeStatusCode(int recipeId, String incorrectJsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, incorrectJsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testDeleteRecipeForbiddenStatusCode(int recipeId, String[] loginPass) {
            HttpResponse response = delete(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 403);

            return correct();
        }

        CheckResult testUpdateRecipeForbiddenStatusCode(int recipeId, String jsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 403);

            return correct();
        }

        // Not registered user tests
        CheckResult testPostRecipeUnregisteredUser(String jsonRecipe) {
            HttpResponse response = addAuthUnregisteredUser(post(API_RECIPE_NEW, jsonRecipe)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipeUnregisteredUser(int recipeId) {
            HttpResponse response = addAuthUnregisteredUser(get(API_RECIPE + recipeId)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testUpdateRecipeUnregisteredUser(int recipeId, String jsonRecipe) {
            HttpResponse response = addAuthUnregisteredUser(put(API_RECIPE + recipeId, jsonRecipe)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testDeleteRecipeUnregisteredUser(int recipeId) {
            HttpResponse response = addAuthUnregisteredUser(delete(API_RECIPE + recipeId)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipesByCategorySortedUnregisteredUser(String paramValue) {
            HttpResponse response = addAuthUnregisteredUser(get(API_RECIPE_SEARCH)).addParam(CATEGORY, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);


            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSortedUnregisteredUser(String paramValue) {
            HttpResponse response = addAuthUnregisteredUser(get(API_RECIPE_SEARCH)).addParam(NAME, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        // No authentication tests
        CheckResult testPostRecipeNoAuth(String jsonRecipe) {
            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipeNoAuth(int recipeId) {
            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testUpdateRecipeNoAuth(int recipeId, String jsonRecipe) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testDeleteRecipeNoAuth(int recipeId) {
            HttpResponse response = delete(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipesByCategorySortedNoAuth(String paramValue) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam(CATEGORY, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);


            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSortedNoAuth(String paramValue) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam(NAME, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }
    }
  learner_created: false
- name: src/recipes/controller/RecipeController.java
  visible: true
  text: |
    package recipes.controller;

    import com.fasterxml.jackson.annotation.JsonView;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.fasterxml.jackson.databind.SerializationFeature;
    import com.fasterxml.jackson.databind.ser.FilterProvider;
    import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
    import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
    import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;
    import recipes.model.Recipe;
    import recipes.service.RecipeService;

    import java.time.LocalDateTime;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;

    @RestController
    public class RecipeController {

        private final RecipeService recipeService;

        @Autowired
        public RecipeController(RecipeService recipeService) {
            this.recipeService = recipeService;
        }

        private final Recipe firstRecipe = new Recipe();
        //stage 1
        @PostMapping("/api/recipe")
        public ResponseEntity addRecipe(@RequestBody Recipe recipe) {
            firstRecipe.setName(recipe.getName());
            firstRecipe.setDescription(recipe.getDescription());
            firstRecipe.setIngredients(recipe.getIngredients());
            firstRecipe.setDirections(recipe.getDirections());
            System.out.println("Adding recipe: " + firstRecipe);
            return new ResponseEntity(firstRecipe, HttpStatus.OK);
        }

        @GetMapping("/api/recipe")
        public ResponseEntity getRecipe() {
            System.out.println("Getting recipe: " + firstRecipe);
            return new ResponseEntity(firstRecipe, HttpStatus.OK);
        }


        //Stage 2
        @PostMapping("/api/recipe/new")
        public ResponseEntity addNewRecipe(@Validated @RequestBody Recipe recipeToAdd) throws JsonProcessingException {
            System.out.println("~~~~Adding new recipe~~~~");
            recipeToAdd.setDate(LocalDateTime.now());
            Recipe r = recipeService.save(recipeToAdd);
            System.out.println("~~~~New Recipe's id = "+r.getId()+"~~~~");

            SimpleBeanPropertyFilter filter = SimpleBeanPropertyFilter.filterOutAllExcept("id");
            String idNewRecipe = recipeApplyFilter(filter, recipeToAdd);

            return new ResponseEntity<>(idNewRecipe, HttpStatus.OK);
        }

        @GetMapping("/api/recipe/{id}")
        public ResponseEntity getRecipeById(@PathVariable Integer id) throws JsonProcessingException {
            System.out.println("~~~~Getting Recipe By Id = "+id+"~~~~");
            Recipe r = recipeService.findById(id);
            if(r == null) {
                System.out.println("~~~~Not Found~~~~");
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            } else {
                System.out.println("~~~~Found~~~~");
                SimpleBeanPropertyFilter filter = SimpleBeanPropertyFilter.serializeAllExcept("id");
                return new ResponseEntity(recipeApplyFilter(filter, r), HttpStatus.OK);
            }
        }

        @DeleteMapping("/api/recipe/{id}")
        public ResponseEntity deleteRecipe(@PathVariable Integer id) {
            if(recipeService.checkExistsById(id)) {
                System.out.println("~~~~Found recipe with id = "+id+" deleting");
                recipeService.deleteById(id);
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            } else {
                System.out.println("~~~~Not found~~~~");
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
        }

        @PutMapping("/api/recipe/{id}")
        public ResponseEntity updateRecipe(@PathVariable Integer id,
                                           @Validated @RequestBody Recipe recipeToUpdate) {
            Recipe recipe = recipeService.findById(id);
            if(recipe == null) {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            } else {
                System.out.println("~~~~Updating recipe id = "+id+"~~~~");
                recipe.setName(recipeToUpdate.getName());
                recipe.setCategory(recipeToUpdate.getCategory());
                recipe.setDescription(recipeToUpdate.getDescription());
                recipe.setIngredients(recipeToUpdate.getIngredients());
                recipe.setDirections(recipeToUpdate.getDirections());
                recipe.setDate(LocalDateTime.now());
                recipeService.save(recipe);

                return new ResponseEntity(HttpStatus.NO_CONTENT);
            }
        }

        @GetMapping("/api/recipe/search")
        public ResponseEntity search (@RequestParam(required = false) Map<String, String> request) throws JsonProcessingException {
            if(request.isEmpty() || request.size() > 1) {
                System.out.println("~~~~No request param~~~~");
                return new ResponseEntity(HttpStatus.BAD_REQUEST);
            } else {
                ObjectMapper objectMapper = new ObjectMapper()
                                            .registerModule(new JavaTimeModule())
                                            .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
                SimpleBeanPropertyFilter filter = SimpleBeanPropertyFilter.serializeAllExcept("id");
                FilterProvider filterProvider = new SimpleFilterProvider().addFilter("recipeFilter", filter);
                if(request.containsKey("category")) {
                    String category = request.get("category");
                    System.out.println("~~~~List for category: "+category+"~~~~");
                    List<Recipe> recipeList = recipeService.findAllByCategoryAllIgnoreCaseOrderByDateDesc(category);
                    String list = objectMapper.writer(filterProvider).withDefaultPrettyPrinter().writeValueAsString(recipeList);

                    return new ResponseEntity<>(list, HttpStatus.OK);
                } else if(request.containsKey("name")) {
                    String name = request.get("name");
                    System.out.println("Name parameter: "+name);
                    List<Recipe> recipeList = recipeService.findByNameContainingIgnoreCaseOrderByDateDesc(name);
                    String list = objectMapper.writer(filterProvider).withDefaultPrettyPrinter().writeValueAsString(recipeList);

                    return new ResponseEntity<>(list, HttpStatus.OK);
                }
                return new ResponseEntity(HttpStatus.BAD_REQUEST);
            }
        }

        private static String recipeApplyFilter(SimpleBeanPropertyFilter filter, Recipe recipe) throws JsonProcessingException {
            ObjectMapper objectMapper = new ObjectMapper()
                    .registerModule(new JavaTimeModule())
                    .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
            FilterProvider filterProvider = new SimpleFilterProvider().addFilter("recipeFilter", filter);
            String recipeAsJson = objectMapper.writer(filterProvider).withDefaultPrettyPrinter().writeValueAsString(recipe);
            return  recipeAsJson;
        }
    }
  learner_created: true
- name: src/recipes/repository/RecipeRepository.java
  visible: true
  text: |
    package recipes.repository;

    import org.springframework.data.domain.Sort;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;
    import recipes.model.Recipe;

    import java.util.List;
    import java.util.Optional;

    @Repository
    public interface RecipeRepository extends JpaRepository<Recipe, Integer> {
        @Override
        <S extends Recipe> S save(S entity);

        @Override
        Optional<Recipe> findById(Integer integer);

        @Override
        boolean existsById(Integer integer);

        @Override
        void deleteById(Integer integer);

        List<Recipe> findAllByCategoryAllIgnoreCaseOrderByDateDesc(String category);

        List<Recipe> findByNameContainingIgnoreCaseOrderByDateDesc(String name);
    }
  learner_created: true
- name: src/recipes/service/RecipeService.java
  visible: true
  text: |
    package recipes.service;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.data.domain.Sort;
    import org.springframework.stereotype.Service;
    import recipes.model.Recipe;
    import recipes.repository.RecipeRepository;

    import java.util.List;
    import java.util.Optional;

    @Service
    public class RecipeService {
        private final RecipeRepository repository;

        @Autowired
        public RecipeService(RecipeRepository repository) {
            this.repository = repository;
        }

        public Recipe save(Recipe recipe) {
            System.out.println("~~~~Saving : "+recipe.getName()+"~~~~");
            return repository.save(recipe);
        }

        public Recipe findById(Integer id) {
            Optional<Recipe> recipe = repository.findById(id);
            if(recipe.isEmpty()) {
                System.out.println("~~~~Not found from RecipeService~~~~");
                return null;
            } else {
                return repository.findById(id).get();
            }

        }

        public boolean checkExistsById(Integer id) {
            return repository.existsById(id);
        }

        public void deleteById(Integer id) {
            repository.deleteById(id);
        }

        public List<Recipe> findAllByCategoryAllIgnoreCaseOrderByDateDesc(String category) {
            return repository.findAllByCategoryAllIgnoreCaseOrderByDateDesc(category);
        }

        public List<Recipe> findByNameContainingIgnoreCaseOrderByDateDesc(String name) {
            return repository.findByNameContainingIgnoreCaseOrderByDateDesc(name);
        }
    }
  learner_created: true
- name: src/recipes/model/Recipe.java
  visible: true
  text: |
    package recipes.model;

    import com.fasterxml.jackson.annotation.JsonFilter;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
    import com.fasterxml.jackson.databind.annotation.JsonSerialize;
    import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;
    import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.springframework.format.annotation.DateTimeFormat;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Size;
    import java.time.LocalDateTime;
    import java.util.ArrayList;
    import java.util.List;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    @JsonFilter("recipeFilter")
    @Entity
    public class Recipe {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer id;

        @NotBlank
        @NotNull
        private String name;

        @NotBlank
        private String description;

        @Builder.Default
        @ElementCollection
        @Size(min = 1)
        private List<String> ingredients = new ArrayList<>();

        @Builder.Default
        @ElementCollection
        @Size(min = 1)
        private List<String> directions = new ArrayList<>();

        @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
    //    @JsonSerialize(using = LocalDateTimeSerializer.class)
    //    @JsonDeserialize(using = LocalDateDeserializer.class)
        private LocalDateTime date;

        @NotBlank
        private String category;
    }
  learner_created: true
- name: src/recipes/controller/UserController.java
  visible: true
  learner_created: true
- name: src/recipes/model/User.java
  visible: true
  learner_created: true
- name: src/recipes/security/SecurityConfig.java
  visible: true
  learner_created: true
- name: src/recipes/security/UserDetailsImpl.java
  visible: true
  learner_created: true
- name: src/recipes/service/UserDetailsServiceImpl.java
  visible: true
  learner_created: true
- name: src/recipes/repository/UserRepository.java
  visible: true
  learner_created: true
- name: src/recipes/service/UserService.java
  visible: true
  learner_created: true
- name: src/recipes/db/recipes_db.mv.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13092#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Wed, 09 Nov 2022 06:21:29 UTC"
record: -1
